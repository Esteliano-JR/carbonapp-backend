// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       String   @unique
  email     String   @unique
  rua       String
  complemento String?
  cidade    String
  cep       String
  pontos     Int      @default(0)
  createdAt DateTime @default(now())

  // RELACIONAMENTOS
  usuarioAcoes  UsuarioAcao[]
  auth          Auth?
  resgates      Resgate[]
  logAtividades LogAtividade[]
  agendamentos Agendamento[]
}

model Acao {
  id        Int    @id @default(autoincrement())
  descricao String
  pontos    Int

  // Quem realizou essa ação (histórico)
  usuarios UsuarioAcao[]
}

// HISTÓRICO: usuário X realizou ação Y em data Z
model UsuarioAcao {
  id        Int      @id @default(autoincrement())
  usuario   User     @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  acao      Acao     @relation(fields: [acaoId], references: [id])
  acaoId    Int
  createdAt DateTime @default(now())
}

model Auth {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  password String
}

model Recompensa {
  id          Int       @id @default(autoincrement())
  titulo      String
  descricao   String
  custoPontos Int
  createdAt   DateTime  @default(now())
  resgates    Resgate[]
}

model Resgate {
  id           Int        @id @default(autoincrement())
  usuario      User       @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  recompensa   Recompensa @relation(fields: [recompensaId], references: [id])
  recompensaId Int
  createdAt    DateTime   @default(now())
}

model LogAtividade {
  id        Int      @id @default(autoincrement())
  usuario   User     @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  tipo      String
  detalhes  String?
  createdAt DateTime @default(now())
}

model Parceiro {
  id        Int         @id @default(autoincrement())
  nome      String
  email     String      @unique
  telefone  String
  cidade    String
  estado    String
  createdAt DateTime    @default(now())

  agendamentos Agendamento[]
}

model Material {
  id          Int           @id @default(autoincrement())
  nome        String
  agendamentos AgendamentoMaterial[]
}

model Agendamento {
  id           Int           @id @default(autoincrement())
  usuario      User          @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  parceiro     Parceiro?     @relation(fields: [parceiroId], references: [id])
  parceiroId   Int?
  nomeCompleto String
  telefone     String
  endereco     String
  data         DateTime
  horario      String
  observacoes  String?
  status       String        @default("PENDENTE")
  createdAt    DateTime      @default(now())

  materiais    AgendamentoMaterial[]
}

model AgendamentoMaterial {
  id            Int         @id @default(autoincrement())
  agendamento   Agendamento @relation(fields: [agendamentoId], references: [id])
  agendamentoId Int
  material      Material    @relation(fields: [materialId], references: [id])
  materialId    Int
}